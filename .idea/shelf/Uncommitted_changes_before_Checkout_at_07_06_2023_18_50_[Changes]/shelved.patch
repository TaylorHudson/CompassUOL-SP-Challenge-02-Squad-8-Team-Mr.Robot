Index: ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/service/ProductService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.compassuol.sp.challenge.ecommerce.service;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.modelmapper.ModelMapper;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport br.com.compassuol.sp.challenge.ecommerce.dto.request.ProductRequestDTO;\r\nimport br.com.compassuol.sp.challenge.ecommerce.dto.response.ProductResponseDTO;\r\nimport br.com.compassuol.sp.challenge.ecommerce.dto.response.ProductResponseDTO;\r\nimport br.com.compassuol.sp.challenge.ecommerce.entity.Product;\r\nimport br.com.compassuol.sp.challenge.ecommerce.exceptions.ResourceNotFoundException;\r\nimport br.com.compassuol.sp.challenge.ecommerce.repository.ProductRepository;\r\n\r\n@Service\r\npublic class ProductService {\r\n\r\n\tprivate final ProductRepository productRepository;\r\n\r\n\tprivate final ModelMapper mapper;\r\n\r\n\t@Autowired\r\n\tpublic ProductService(ProductRepository productRepository, ModelMapper mapper) {\r\n\t\tthis.productRepository = productRepository;\r\n\t\tthis.mapper = mapper;\r\n\t}\r\n\r\n\tpublic ProductRequestDTO findProductById(int id) {\r\n\t\tProduct customer = productRepository.findById(id)\r\n\t\t\t\t.orElseThrow(() -> new ResourceNotFoundException(\"Did not find customer with id - \" + id));\r\n\r\n\t\treturn mapper.map(customer, ProductRequestDTO.class);\r\n\t}\r\n\r\n\tpublic ProductRequestDTO createProduct(ProductRequestDTO product) {\r\n\r\n\t\tProduct createdProduct = mapper.map(product, Product.class);\r\n\r\n\t\tcreatedProduct = productRepository.save(createdProduct);\r\n\r\n\t\treturn mapper.map(createdProduct, ProductRequestDTO.class);\r\n\t}\r\n\r\n\tpublic List<ProductResponseDTO> findAllProducts(){\r\n\t    \tList<Product> productsList = productRepository.findAll();\r\n\t    \t\r\n\t    \tList<ProductResponseDTO> productsListDTO = new ArrayList<>();\r\n\t    \t\r\n\t    \tfor (Product product : productsList) {\r\n\t    \t\tproductsListDTO.add(mapper.map(product, ProductResponseDTO.class));\r\n\t    \t}\r\n\t    \t\r\n\t    \treturn productsListDTO;\r\n\t    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/service/ProductService.java b/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/service/ProductService.java
--- a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/service/ProductService.java	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
+++ b/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/service/ProductService.java	(date 1686173207642)
@@ -9,7 +9,6 @@
 
 import br.com.compassuol.sp.challenge.ecommerce.dto.request.ProductRequestDTO;
 import br.com.compassuol.sp.challenge.ecommerce.dto.response.ProductResponseDTO;
-import br.com.compassuol.sp.challenge.ecommerce.dto.response.ProductResponseDTO;
 import br.com.compassuol.sp.challenge.ecommerce.entity.Product;
 import br.com.compassuol.sp.challenge.ecommerce.exceptions.ResourceNotFoundException;
 import br.com.compassuol.sp.challenge.ecommerce.repository.ProductRepository;
@@ -54,5 +53,24 @@
 	    	
 	    	return productsListDTO;
 	    }
+	public ProductResponseDTO updateProduct(int id, ProductRequestDTO request) {
+		Product product = productRepository.findById(id)
+				.orElseThrow(() -> new ResourceNotFoundException("The id supplied must be from a product that is already created"));
+
+		product.setName(request.getName());
+		product.setPrice(request.getPrice());
+
+		Product updatedProduct = productRepository.save(product);
+		return mapper.map(updatedProduct, ProductResponseDTO.class);
+	}
+
+	public void deleteProduct(int id) {
+		Product product = productRepository.findById(id)
+				.orElseThrow(() -> new ResourceNotFoundException("The product corresponding to this ID does not exist"));
+
+		productRepository.delete(product);
+	}
+
+
 
 }
Index: ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/controllers/ProductRestController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.compassuol.sp.challenge.ecommerce.controllers;\r\n\r\nimport java.util.List;\r\n\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport br.com.compassuol.sp.challenge.ecommerce.dto.request.ProductRequestDTO;\r\nimport br.com.compassuol.sp.challenge.ecommerce.dto.response.ProductResponseDTO;\r\nimport br.com.compassuol.sp.challenge.ecommerce.service.ProductService;\r\nimport jakarta.validation.Valid;\r\n\r\n@RestController\r\n@RequestMapping(\"/v1\")\r\npublic class ProductRestController {\r\n\t\t\r\n\t private final ProductService productService;\r\n\r\n\t    public ProductRestController(ProductService productService) {\r\n\t        this.productService = productService;\r\n\t    }\r\n\r\n\t    @GetMapping(\"/products/{id}\")\r\n\t    public ResponseEntity<ProductRequestDTO> findProductById(@PathVariable int id){\r\n\t        var productDTO = productService.findProductById(id);\r\n\t        return ResponseEntity.status(HttpStatus.OK).body(productDTO);\r\n\t    }\r\n\t    \r\n\t    @GetMapping(\"/products\")\r\n\t    public ResponseEntity<List<ProductResponseDTO>> retrieveAllProducts(){\r\n\t    \tvar retrieveAll = productService.findAllProducts();\r\n\t    \treturn ResponseEntity.status(HttpStatus.OK).body(retrieveAll);\r\n\t    }\r\n\r\n\t    @PostMapping(\"/products\")\r\n\t    public ResponseEntity<ProductRequestDTO> createProduct(@Valid @RequestBody ProductRequestDTO product) {\r\n\t        var createdProduct = productService.createProduct(product);\r\n\t        return ResponseEntity.status(HttpStatus.CREATED).body(createdProduct);\r\n\t    }\r\n\t\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/controllers/ProductRestController.java b/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/controllers/ProductRestController.java
--- a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/controllers/ProductRestController.java	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
+++ b/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/controllers/ProductRestController.java	(date 1686174390768)
@@ -4,12 +4,7 @@
 
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.GetMapping;
-import org.springframework.web.bind.annotation.PathVariable;
-import org.springframework.web.bind.annotation.PostMapping;
-import org.springframework.web.bind.annotation.RequestBody;
-import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RestController;
+import org.springframework.web.bind.annotation.*;
 
 import br.com.compassuol.sp.challenge.ecommerce.dto.request.ProductRequestDTO;
 import br.com.compassuol.sp.challenge.ecommerce.dto.response.ProductResponseDTO;
@@ -43,5 +38,16 @@
 	        var createdProduct = productService.createProduct(product);
 	        return ResponseEntity.status(HttpStatus.CREATED).body(createdProduct);
 	    }
-	
+
+		@DeleteMapping("/products/{id}")
+		public ResponseEntity<ProductResponseDTO> deleteProduct(@PathVariable int id) {
+		productService.deleteProduct(id);
+		return ResponseEntity.ok().build();
+		}
+
+		@PutMapping("/products/{id}")
+		public ResponseEntity<ProductResponseDTO> updateProduct(@PathVariable int id, @Valid @RequestBody ProductRequestDTO product) {
+			var updatedProduct = productService.updateProduct(id, product);
+			return ResponseEntity.status(HttpStatus.OK).body(updatedProduct);
+		}
 }
Index: .idea/CompassUOL-SP-Challenge-02-Squad-8-Team-Mr.Robot.iml
===================================================================
diff --git a/.idea/CompassUOL-SP-Challenge-02-Squad-8-Team-Mr.Robot.iml b/.idea/CompassUOL-SP-Challenge-02-Squad-8-Team-Mr.Robot.iml
deleted file mode 100644
--- a/.idea/CompassUOL-SP-Challenge-02-Squad-8-Team-Mr.Robot.iml	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
+++ /dev/null	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$" />
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="sourceFolder" forTests="false" />
-  </component>
-</module>
\ No newline at end of file
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
+++ /dev/null	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
@@ -1,3 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
Index: ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/service/CustomerService.java
===================================================================
diff --git a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/service/CustomerService.java b/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/service/CustomerService.java
deleted file mode 100644
--- a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/service/CustomerService.java	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
+++ /dev/null	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
@@ -1,55 +0,0 @@
-package br.com.compassuol.sp.challenge.ecommerce.service;
-
-
-import org.modelmapper.ModelMapper;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.stereotype.Service;
-
-import br.com.compassuol.sp.challenge.ecommerce.dto.request.CustomerRequestDTO;
-import br.com.compassuol.sp.challenge.ecommerce.dto.response.CustomerResponseDTO;
-import br.com.compassuol.sp.challenge.ecommerce.entity.Customer;
-import br.com.compassuol.sp.challenge.ecommerce.exceptions.ResourceNotFoundException;
-import br.com.compassuol.sp.challenge.ecommerce.repository.CustomerRepository;
-
-@Service
-public class CustomerService {
-
-    private final CustomerRepository customerRepository;
-
-    private final ModelMapper mapper;
-
-    @Autowired
-    public CustomerService(CustomerRepository customerRepository, ModelMapper mapper) {
-        this.customerRepository = customerRepository;
-        this.mapper = mapper;
-    }
-
-    public CustomerResponseDTO findCustomerById(int id) {
-        Customer customer = customerRepository.findById(id)
-                .orElseThrow(() -> new ResourceNotFoundException("Did not find customer with id - " + id));
-
-        return mapper.map(customer, CustomerResponseDTO.class);
-    }
-
-    public CustomerResponseDTO createCustomer(CustomerRequestDTO customer) {
-
-        Customer createdCustomer = mapper.map(customer,Customer.class);
-
-        createdCustomer = customerRepository.save(createdCustomer);
-
-        createdCustomer.setActive(true);
-
-        return mapper.map(createdCustomer,CustomerResponseDTO.class);
-    }
-
-    public CustomerResponseDTO updateCustomer(int id, CustomerRequestDTO request) {
-        customerRepository.findById(id)
-                .orElseThrow(() -> new ResourceNotFoundException("The id supplied must be from a customer that is already created"));
-
-        Customer customer = mapper.map(request, Customer.class);
-        customer.setCustomerId(id);
-        Customer updatedCustomer = customerRepository.save(customer);
-        return mapper.map(updatedCustomer, CustomerResponseDTO.class);
-    }
-
-}
\ No newline at end of file
Index: ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/dto/response/CustomerResponseDTO.java
===================================================================
diff --git a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/dto/response/CustomerResponseDTO.java b/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/dto/response/CustomerResponseDTO.java
deleted file mode 100644
--- a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/dto/response/CustomerResponseDTO.java	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
+++ /dev/null	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
@@ -1,21 +0,0 @@
-package br.com.compassuol.sp.challenge.ecommerce.dto.response;
-
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-@Getter @Setter
-@AllArgsConstructor
-@NoArgsConstructor
-public class CustomerResponseDTO {
-
-    private int customerId;
-
-    private String name;
-
-    private String cpf;
-
-    private String email;
-
-}
Index: ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/dto/request/CustomerRequestDTO.java
===================================================================
diff --git a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/dto/request/CustomerRequestDTO.java b/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/dto/request/CustomerRequestDTO.java
deleted file mode 100644
--- a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/dto/request/CustomerRequestDTO.java	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
+++ /dev/null	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
@@ -1,24 +0,0 @@
-package br.com.compassuol.sp.challenge.ecommerce.dto.request;
-
-import jakarta.validation.constraints.Email;
-import jakarta.validation.constraints.Size;
-import lombok.AllArgsConstructor;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-
-@Getter @Setter
-@AllArgsConstructor
-@NoArgsConstructor
-public class CustomerRequestDTO {
-
-    @Size(min = 3,message = "The name must be at least 3 characters long")
-    private String name;
-
-    @Size(min = 11, max = 14,message = "The cpf ins't in the correct size")
-    private String cpf;
-
-    @Email(message = "The email must be a well-formed email address")
-    private String email;
-
-}
Index: ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/repository/CustomerRepository.java
===================================================================
diff --git a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/repository/CustomerRepository.java b/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/repository/CustomerRepository.java
deleted file mode 100644
--- a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/repository/CustomerRepository.java	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
+++ /dev/null	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
@@ -1,9 +0,0 @@
-package br.com.compassuol.sp.challenge.ecommerce.repository;
-
-import br.com.compassuol.sp.challenge.ecommerce.entity.Customer;
-import org.springframework.data.jpa.repository.JpaRepository;
-
-public interface CustomerRepository extends JpaRepository<Customer, Integer> {
-
-
-}
Index: ecommerce/src/main/resources/DBScripts/customerTable.sql
===================================================================
diff --git a/ecommerce/src/main/resources/DBScripts/customerTable.sql b/ecommerce/src/main/resources/DBScripts/customerTable.sql
deleted file mode 100644
--- a/ecommerce/src/main/resources/DBScripts/customerTable.sql	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
+++ /dev/null	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
@@ -1,11 +0,0 @@
-create database challenge2;
-
-use challenge2;
-
-create table if not exists Customer (
-customer_id int auto_increment primary KEY,
-name VARCHAR(150) NOT NULL,
-cpf VARCHAR(14) NOT NULL UNIQUE,
-email VARCHAR(255) NOT NULL UNIQUE,
-active boolean NOT NULL
-    )
Index: ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/controllers/CustomerRestController.java
===================================================================
diff --git a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/controllers/CustomerRestController.java b/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/controllers/CustomerRestController.java
deleted file mode 100644
--- a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/controllers/CustomerRestController.java	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
+++ /dev/null	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
@@ -1,47 +0,0 @@
-package br.com.compassuol.sp.challenge.ecommerce.controllers;
-
-
-import br.com.compassuol.sp.challenge.ecommerce.dto.request.CustomerRequestDTO;
-import br.com.compassuol.sp.challenge.ecommerce.dto.response.CustomerResponseDTO;
-import br.com.compassuol.sp.challenge.ecommerce.entity.Customer;
-import br.com.compassuol.sp.challenge.ecommerce.service.CustomerService;
-import jakarta.validation.Valid;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.http.HttpStatus;
-import org.springframework.http.ResponseEntity;
-import org.springframework.validation.Errors;
-import org.springframework.web.bind.annotation.*;
-
-import java.util.Optional;
-
-@RestController
-@RequestMapping("/v1")
-public class CustomerRestController {
-
-    private final CustomerService customerService;
-
-    public CustomerRestController(CustomerService customerService) {
-        this.customerService = customerService;
-    }
-
-    @GetMapping("/customers/{id}")
-    public ResponseEntity<CustomerResponseDTO> findCustomerById(@PathVariable int id){
-        var customerDTO = customerService.findCustomerById(id);
-        return ResponseEntity.status(HttpStatus.OK).body(customerDTO);
-    }
-
-    @PostMapping("/customers")
-    public ResponseEntity<CustomerResponseDTO> createCustomer(@Valid @RequestBody CustomerRequestDTO customer) {
-        var createdCustomer = customerService.createCustomer(customer);
-        return ResponseEntity.status(HttpStatus.CREATED).body(createdCustomer);
-    }
-
-    @PutMapping("/customers/{id}")
-    public ResponseEntity<CustomerResponseDTO> updateCustomer(
-            @PathVariable int id,
-            @Valid @RequestBody CustomerRequestDTO customer){
-        var updatedCustomer = customerService.updateCustomer(id, customer);
-        return ResponseEntity.status(HttpStatus.OK).body(updatedCustomer);
-    }
-
-}
Index: ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/entity/Customer.java
===================================================================
diff --git a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/entity/Customer.java b/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/entity/Customer.java
deleted file mode 100644
--- a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/entity/Customer.java	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
+++ /dev/null	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
@@ -1,41 +0,0 @@
-package br.com.compassuol.sp.challenge.ecommerce.entity;
-
-import jakarta.persistence.*;
-import jakarta.validation.constraints.Email;
-import jakarta.validation.constraints.Size;
-import lombok.Getter;
-import lombok.NoArgsConstructor;
-import lombok.Setter;
-import org.hibernate.validator.constraints.UniqueElements;
-
-@Getter
-@Setter
-@NoArgsConstructor
-@Entity
-@Table(name = "customer")
-public class Customer {
-    @Id
-    @GeneratedValue(strategy = GenerationType.IDENTITY)
-    @Column(name = "customer_id")
-    private int customerId;
-
-    @Size(min = 3,message = "The name must be at least 3 characters long")
-    private String name;
-
-    @Size(min = 11, max = 14,message = "The cpf ins't in the correct size")
-
-    private String cpf;
-
-    @Email(message = "The email must be a well-formed email address")
-    private String email;
-
-    private boolean active;
-
-    public Customer(String name, String cpf, String email, boolean active) {
-        this.name = name;
-        this.cpf = cpf;
-        this.email = email;
-        this.active = active;
-    }
-
-}
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1686169193781)
+++ b/.idea/encodings.xml	(date 1686169193781)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/ecommerce/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/ecommerce/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1686169463072)
+++ b/.idea/compiler.xml	(date 1686169463072)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile default="true" name="Default" enabled="true" />
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="ecommerce" />
+      </profile>
+    </annotationProcessing>
+  </component>
+  <component name="JavacSettings">
+    <option name="ADDITIONAL_OPTIONS_OVERRIDE">
+      <module name="ecommerce" options="-parameters" />
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/aws.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/aws.xml b/.idea/aws.xml
new file mode 100644
--- /dev/null	(date 1686169138576)
+++ b/.idea/aws.xml	(date 1686169138576)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="accountSettings">
+    <option name="activeRegion" value="us-east-1" />
+    <option name="recentlyUsedRegions">
+      <list>
+        <option value="us-east-1" />
+      </list>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"17 (2)\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
+++ b/.idea/misc.xml	(date 1686169193752)
@@ -1,6 +1,14 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="17 (2)" project-jdk-type="JavaSDK">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/ecommerce/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="19" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	(date 1686169193830)
+++ b/.idea/jarRepositories.xml	(date 1686169193830)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectModuleManager\">\r\n    <modules>\r\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/CompassUOL-SP-Challenge-02-Squad-8-Team-Mr.Robot.iml\" filepath=\"$PROJECT_DIR$/.idea/CompassUOL-SP-Challenge-02-Squad-8-Team-Mr.Robot.iml\" />\r\n    </modules>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
--- a/.idea/modules.xml	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
+++ b/.idea/modules.xml	(date 1686169138486)
@@ -2,7 +2,7 @@
 <project version="4">
   <component name="ProjectModuleManager">
     <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/CompassUOL-SP-Challenge-02-Squad-8-Team-Mr.Robot.iml" filepath="$PROJECT_DIR$/.idea/CompassUOL-SP-Challenge-02-Squad-8-Team-Mr.Robot.iml" />
+      <module fileurl="file://$PROJECT_DIR$/.idea/challenge2.iml" filepath="$PROJECT_DIR$/.idea/challenge2.iml" />
     </modules>
   </component>
 </project>
\ No newline at end of file
Index: .idea/challenge2.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/challenge2.iml b/.idea/challenge2.iml
new file mode 100644
--- /dev/null	(date 1686169138421)
+++ b/.idea/challenge2.iml	(date 1686169138421)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: ecommerce/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n#JDBC properties\r\n\r\nspring.datasource.url = jdbc:mysql://localhost:3306/challenge2\r\nspring.datasource.username=root\r\nspring.datasource.password=m@rgarida2018\r\nserver.port = 9090\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/ecommerce/src/main/resources/application.properties b/ecommerce/src/main/resources/application.properties
--- a/ecommerce/src/main/resources/application.properties	(revision 49a63d33193ab0e853b303023052f3e8a3f17ea2)
+++ b/ecommerce/src/main/resources/application.properties	(date 1686169592506)
@@ -1,7 +1,8 @@
 
 #JDBC properties
 
-spring.datasource.url = jdbc:mysql://localhost:3306/challenge2
+spring.datasource.url = jdbc:mysql://localhost:3306
 spring.datasource.username=root
-spring.datasource.password=m@rgarida2018
-server.port = 9090
+spring.datasource.password=root
+
+
