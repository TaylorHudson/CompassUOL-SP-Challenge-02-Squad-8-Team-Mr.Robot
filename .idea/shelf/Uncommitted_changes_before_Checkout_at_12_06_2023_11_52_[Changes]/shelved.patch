Index: ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/dto/request/ProductRequestDTO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.compassuol.sp.challenge.ecommerce.dto.request;\r\n\r\n\r\nimport br.com.compassuol.sp.challenge.ecommerce.dto.response.ProductResponseDTO;\r\nimport jakarta.validation.constraints.Size;\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Getter;\r\nimport lombok.NoArgsConstructor;\r\nimport lombok.Setter;\r\n\r\n@Getter @Setter\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class ProductRequestDTO {\r\n\r\n    private String description;\r\n\r\n    private String name;\r\n\r\n    private double price;\r\n\r\n    public int productId;\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/dto/request/ProductRequestDTO.java b/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/dto/request/ProductRequestDTO.java
--- a/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/dto/request/ProductRequestDTO.java	(revision 4bbbe5c74023a90c076af21574dff0e38af25f1b)
+++ b/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/dto/request/ProductRequestDTO.java	(date 1686581311469)
@@ -19,6 +19,4 @@
 
     private double price;
 
-    public int productId;
-
 }
Index: ecommerce/src/test/java/br/com/compassuol/sp/challenge/ecommerce/service/ProductServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.compassuol.sp.challenge.ecommerce.service;\r\n\r\nimport br.com.compassuol.sp.challenge.ecommerce.dto.request.ProductRequestDTO;\r\nimport br.com.compassuol.sp.challenge.ecommerce.dto.response.ProductResponseDTO;\r\nimport br.com.compassuol.sp.challenge.ecommerce.entity.Product;\r\nimport br.com.compassuol.sp.challenge.ecommerce.exceptions.ResourceNotFoundException;\r\nimport br.com.compassuol.sp.challenge.ecommerce.repository.ProductRepository;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.mockito.InjectMocks;\r\nimport org.mockito.Mock;\r\nimport org.mockito.Spy;\r\nimport org.mockito.junit.jupiter.MockitoExtension;\r\nimport org.modelmapper.ModelMapper;\r\n\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\nimport static org.hibernate.validator.internal.util.Contracts.assertNotNull;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\n@ExtendWith(MockitoExtension.class)\r\nclass ProductServiceTest {\r\n\r\n\r\n    private Product createProductDefault() {\r\n        Product product = new Product(\"Skirt\", 54.99, \"Fabric cotton\" );\r\n        product.setProductId(1);\r\n\r\n        return product;\r\n    }\r\n\r\n    private ProductResponseDTO createExpectedResponseDefault() {\r\n        return new ProductResponseDTO(1, \"Skirt\", 54.99, \"Fabric cotton\");\r\n    }\r\n\r\n    @Mock\r\n    private ProductRepository productRepository;\r\n\r\n    @Spy\r\n    private ModelMapper modelMapper;\r\n\r\n    @InjectMocks\r\n    private ProductService productService;\r\n\r\n\r\n\r\n\t@Test\r\n    public void findProductByIdSuccessTest() {\r\n\r\n        Product product = createProductDefault();\r\n        ProductResponseDTO expectedResponse = createExpectedResponseDefault();\r\n\r\n    \twhen(productRepository.findById(any())).thenReturn(Optional.of(product));\r\n\r\n    \tProductResponseDTO request = productService.findProductById(1);\r\n\r\n    \tassertAll(\"response\",\r\n    \t\t\t() -> assertEquals(expectedResponse.getName(), request.getName()),\r\n    \t\t\t() -> assertEquals(expectedResponse.getPrice(), request.getPrice(), 0.01),\r\n    \t\t\t() -> assertEquals(expectedResponse.getDescription(), request.getDescription()),\r\n    \t\t\t() -> assertEquals(1, request.getProductId())\r\n    \t\t);\r\n    \tverify(productRepository).findById(1);\r\n    }\r\n\r\n\r\n    @Test\r\n    public void findProductByIdErrorResourceNotFoundTest() throws ResourceNotFoundException{\r\n\r\n\r\n    \twhen(productRepository.findById(1)).thenThrow(ResourceNotFoundException.class);\r\n\r\n        assertThrows(ResourceNotFoundException.class, () -> productService.findProductById(1));\r\n        verify(productRepository).findById(1);\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    public void createProductSuccessTest(){\r\n\r\n        ProductRequestDTO productRequest = new ProductRequestDTO(\"Fabric cotton\", \"Skirt\", 54.99, 1);\r\n        Product product = createProductDefault();\r\n\r\n\r\n        \twhen(productRepository.save(any(Product.class))).thenReturn(product);\r\n\r\n        \tProductResponseDTO expectedResponse = createExpectedResponseDefault();\r\n            ProductResponseDTO response = productService.createProduct(productRequest);\r\n\r\n        \tassertAll(\"response\",\r\n        \t\t() -> assertEquals(expectedResponse.getName(), response.getName()),\r\n        \t\t() -> assertEquals(expectedResponse.getPrice(), response.getPrice(), 0.01),\r\n        \t\t() -> assertEquals(expectedResponse.getDescription(), response.getDescription()),\r\n        \t\t() -> assertEquals(1, response.getProductId())\r\n        );\r\n\r\n        verify(productRepository).save(any(Product.class));\r\n    }\r\n\r\n    @Test\r\n    public void findAllProductsSuccessTest() {\r\n\r\n    \tProduct product1 = new Product(\"Skirt\", 54.99, \"Fabric cotton\" );\r\n        product1.setProductId(1);\r\n    \tProduct product2 = new Product(\"Pants\", 89.99, \"Jeans\" );\r\n        product2.setProductId(2);\r\n\r\n    \tList<Product> products = new ArrayList<>();\r\n\r\n    \tproducts.add(product1);\r\n    \tproducts.add(product2);\r\n\r\n    \tProductResponseDTO product3 = new ProductResponseDTO(1, \"Skirt\", 54.99, \"Fabric cotton\" );\r\n    \tProductResponseDTO product4 = new ProductResponseDTO(2,\"Pants\", 89.99,\"Jeans\" );\r\n\r\n        List<ProductResponseDTO> expectedProducts = new ArrayList<>();\r\n        expectedProducts.add(product3);\r\n    \texpectedProducts.add(product4);\r\n\r\n    \twhen(productRepository.findAll()).thenReturn(products);\r\n\r\n    \tList<ProductResponseDTO> requestProducts = productService.findAllProducts();\r\n\r\n    \tint i =0;\r\n\r\n    \twhile(i<expectedProducts.size()) {\r\n    \t\tfor (ProductResponseDTO expectedResponseDTO : expectedProducts) {\r\n    \t\t\t assertEquals(expectedResponseDTO.getName(), requestProducts.get(i).getName());\r\n    \t\t\t assertEquals(expectedResponseDTO.getPrice(), requestProducts.get(i).getPrice(), 0.01);\r\n    \t\t\t assertEquals(expectedResponseDTO.getDescription(), requestProducts.get(i).getDescription());\r\n    \t\t\t assertEquals(expectedResponseDTO.getProductId(), requestProducts.get(i).getProductId());\r\n\r\n    \t\t\t i++;\r\n    \t\t}\r\n\t\t}\r\n    }\r\n\r\n    @Test\r\n    void testDeleteProduct() {\r\n        Product product = createProductDefault();\r\n\r\n        when(productRepository.findById(product.getProductId())).thenReturn(Optional.of(product));\r\n\r\n        productService.deleteProduct(product.getProductId());\r\n\r\n        verify(productRepository).findById(product.getProductId());\r\n        verify(productRepository).delete(product);\r\n\r\n    }\r\n\r\n\r\n    @Test\r\n    void testUpdateProduct() {\r\n\r\n        Product product = createProductDefault();\r\n        product = productRepository.save(product);\r\n\r\n        ProductRequestDTO request = new ProductRequestDTO();\r\n        request.setName(\"New Skirt\");\r\n        request.setPrice(59.99);\r\n        request.setDescription(\"Fabric silk\");\r\n        if (product != null) {\r\n            ProductResponseDTO response = productService.updateProduct(product.getProductId(), request);\r\n\r\n            assertNotNull(response);\r\n            assertEquals(request.getName(), response.getName());\r\n            assertEquals(request.getPrice(), response.getPrice(), 0.001);\r\n            assertEquals(request.getDescription(), response.getDescription());\r\n        }\r\n    }\r\n\r\n    @Test\r\n    void updateProductErrorResourceNotFound() {\r\n        when(productRepository.findById(anyInt())).thenReturn(Optional.empty());\r\n\r\n        assertThrows(ResourceNotFoundException.class, () -> productService.findProductById(1));\r\n        verify(productRepository).findById(1);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/src/test/java/br/com/compassuol/sp/challenge/ecommerce/service/ProductServiceTest.java b/ecommerce/src/test/java/br/com/compassuol/sp/challenge/ecommerce/service/ProductServiceTest.java
--- a/ecommerce/src/test/java/br/com/compassuol/sp/challenge/ecommerce/service/ProductServiceTest.java	(revision 4bbbe5c74023a90c076af21574dff0e38af25f1b)
+++ b/ecommerce/src/test/java/br/com/compassuol/sp/challenge/ecommerce/service/ProductServiceTest.java	(date 1686581428483)
@@ -83,7 +83,7 @@
     @Test
     public void createProductSuccessTest(){
 
-        ProductRequestDTO productRequest = new ProductRequestDTO("Fabric cotton", "Skirt", 54.99, 1);
+        ProductRequestDTO productRequest = new ProductRequestDTO("Fabric cotton", "Skirt", 54.99);
         Product product = createProductDefault();
 
 
Index: ecommerce/src/test/java/br/com/compassuol/sp/challenge/ecommerce/controllers/ProductRestControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package br.com.compassuol.sp.challenge.ecommerce.controllers;\r\n\r\nimport br.com.compassuol.sp.challenge.ecommerce.dto.request.ProductRequestDTO;\r\nimport br.com.compassuol.sp.challenge.ecommerce.dto.response.ProductResponseDTO;\r\nimport br.com.compassuol.sp.challenge.ecommerce.exceptions.ProductPriceNotValidException;\r\nimport br.com.compassuol.sp.challenge.ecommerce.exceptions.ResourceNotFoundException;\r\nimport br.com.compassuol.sp.challenge.ecommerce.service.ProductService;\r\nimport br.com.compassuol.sp.challenge.ecommerce.utils.Utils;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\r\nimport org.springframework.boot.test.mock.mockito.MockBean;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\nimport static org.mockito.ArgumentMatchers.*;\r\nimport static org.mockito.Mockito.*;\r\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\r\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\r\nimport static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;\r\n\r\n\r\n@WebMvcTest(controllers = ProductRestController.class)\r\npublic class ProductRestControllerTest {\r\n    private ProductResponseDTO UpdatedProductResponse() {\r\n        ProductResponseDTO response = new ProductResponseDTO();\r\n        response.setName(\"New Product\");\r\n        response.setPrice(9.99);\r\n        response.setDescription(\"Updated description\");\r\n        return response;\r\n    }\r\n\r\n    @MockBean\r\n    private ProductService productService;\r\n\r\n    @Autowired\r\n    private ProductRestController productRestController;\r\n\r\n\t@BeforeEach\r\n    public void setup(){\r\n        standaloneSetup(this.productRestController);\r\n    }\r\n\t@Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    public static final String BASE_URL = \"/v1/products\";\r\n    public static final String ID_URL = \"/v1/products/9\";\r\n\r\n    private ProductResponseDTO createUpdatedProductResponse() {\r\n    \tProductResponseDTO response = new ProductResponseDTO();\r\n    \tresponse.setName(\"New Product\");\r\n    \tresponse.setPrice(9.99);\r\n    \tresponse.setDescription(\"Updated description\");\r\n    \tresponse.setProductId(1);\r\n    \treturn response;\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    void findProductByIdSuccess() throws Exception {\r\n        when(productService.findProductById(anyInt())).thenReturn(new ProductResponseDTO());\r\n\r\n        var result =\r\n                mockMvc.perform(get(ID_URL)\r\n                                .accept(MediaType.APPLICATION_JSON)\r\n                                .contentType(MediaType.APPLICATION_JSON))\r\n                        .andReturn();\r\n        var response = result.getResponse();\r\n\r\n        assertEquals(HttpStatus.OK.value(), response.getStatus());\r\n    }\r\n\r\n    @Test\r\n    void findProductByIdResourceNotFoundException() throws Exception {\r\n        when(productService.findProductById(anyInt())).thenThrow(new ResourceNotFoundException(\"\"));\r\n\r\n        var result =\r\n                mockMvc.perform(get(ID_URL)\r\n                                .accept(MediaType.APPLICATION_JSON)\r\n                                .contentType(MediaType.APPLICATION_JSON))\r\n                        .andReturn();\r\n        var response = result.getResponse();\r\n\r\n        assertEquals(HttpStatus.NOT_FOUND.value(), response.getStatus());\r\n    }\r\n\r\n    @Test\r\n    void createProductSuccess() throws Exception {\r\n        var request = new ProductRequestDTO(\"New description\", \"New Product\", 9.99, 1 );\r\n        var responseDTO = createUpdatedProductResponse();\r\n\r\n        when(productService.createProduct(any(ProductRequestDTO.class))).thenReturn(responseDTO);\r\n\r\n        String requestBody = Utils.mapToString(request);\r\n        var result =\r\n                mockMvc.perform(post(BASE_URL)\r\n                    .accept(MediaType.APPLICATION_JSON)\r\n                    .contentType(MediaType.APPLICATION_JSON)\r\n                    .content(requestBody))\r\n                .andReturn();\r\n        var response = result.getResponse();\r\n\r\n        assertEquals(HttpStatus.CREATED.value(), response.getStatus());\r\n    }\r\n\r\n\r\n    @Test\r\n    void createProductPriceNotValidException() throws Exception {\r\n        var request = new ProductRequestDTO(\"New description\", \"New Product\",0, 1);\r\n\r\n        when(productService.createProduct(any(ProductRequestDTO.class))).thenThrow(new ProductPriceNotValidException(\"\"));\r\n\r\n        String requestBody = Utils.mapToString(request);\r\n        var result =\r\n                mockMvc.perform(post(BASE_URL)\r\n                                .accept(MediaType.APPLICATION_JSON)\r\n                                .contentType(MediaType.APPLICATION_JSON)\r\n                                .content(requestBody))\r\n                        .andReturn();\r\n        var response = result.getResponse();\r\n\r\n        assertEquals(HttpStatus.BAD_REQUEST.value(), response.getStatus());\r\n    }\r\n\r\n    @Test\r\n    void retrieveAllProductsSuccessTest() throws Exception {\r\n        List<ProductResponseDTO> responseDTOS = new ArrayList<>();\r\n        responseDTOS.add(new ProductResponseDTO(1, \"New Product\", 9.99, \"New description\"));\r\n\r\n        when(productService.findAllProducts()).thenReturn(responseDTOS);\r\n\r\n        var result =\r\n                mockMvc.perform(get(BASE_URL)\r\n                                .accept(MediaType.APPLICATION_JSON)\r\n                                .contentType(MediaType.APPLICATION_JSON))\r\n                        .andReturn();\r\n        var response = result.getResponse();\r\n\r\n        assertEquals(HttpStatus.OK.value(), response.getStatus());\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    void deleteProduct_Success() throws Exception {\r\n        int productId = 1;\r\n\r\n        doNothing().when(productService).deleteProduct(productId);\r\n\r\n        ProductRestController productController = new ProductRestController(productService);\r\n\r\n        mockMvc = standaloneSetup(productController).build();\r\n\r\n        mockMvc.perform(delete(\"/v1/products/{id}\", productId))\r\n                .andExpect(status().isOk());\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    void testUpdateProduct_Success() throws Exception {\r\n        int productId = 1;\r\n        ProductRequestDTO request = new ProductRequestDTO();\r\n        request.setName(\"New Product\");\r\n        request.setPrice(9.99);\r\n        request.setDescription(\"Updated description\");\r\n\r\n        when(productService.updateProduct(eq(productId), any(ProductRequestDTO.class)))\r\n                .thenReturn(UpdatedProductResponse());\r\n\r\n        ProductRestController productController = new ProductRestController(productService);\r\n        mockMvc = standaloneSetup(productController).build();\r\n\r\n\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n\r\n         mockMvc.perform(put(\"/v1/products/{id}\", productId)\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(objectMapper.writeValueAsString(request)))\r\n                .andExpect(status().isOk())\r\n                .andExpect(jsonPath(\"$.name\").value(\"New Product\"))\r\n                .andExpect(jsonPath(\"$.price\").value(9.99))\r\n                .andExpect(jsonPath(\"$.description\").value(\"Updated description\"));\r\n\r\n        verify(productService).updateProduct(eq(productId), any(ProductRequestDTO.class));\r\n    }\r\n\r\n    @Test\r\n    void testUpdateProduct_ProductNotFoundException() throws Exception {\r\n        int productId = 1;\r\n        ProductRequestDTO productRequest = new ProductRequestDTO();\r\n\r\n        when(productService.updateProduct(productId, productRequest)).thenThrow(new ResourceNotFoundException(\"Product not found\"));\r\n\r\n        ProductRestController productController = new ProductRestController(productService);\r\n\r\n        mockMvc = standaloneSetup(productController).build();\r\n\r\n        mockMvc.perform(put(\"/v1/products/{id}\", productId)\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .content(Utils.mapToString(productRequest)))\r\n                .andExpect(status().isOk());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ecommerce/src/test/java/br/com/compassuol/sp/challenge/ecommerce/controllers/ProductRestControllerTest.java b/ecommerce/src/test/java/br/com/compassuol/sp/challenge/ecommerce/controllers/ProductRestControllerTest.java
--- a/ecommerce/src/test/java/br/com/compassuol/sp/challenge/ecommerce/controllers/ProductRestControllerTest.java	(revision 4bbbe5c74023a90c076af21574dff0e38af25f1b)
+++ b/ecommerce/src/test/java/br/com/compassuol/sp/challenge/ecommerce/controllers/ProductRestControllerTest.java	(date 1686581412615)
@@ -95,7 +95,7 @@
 
     @Test
     void createProductSuccess() throws Exception {
-        var request = new ProductRequestDTO("New description", "New Product", 9.99, 1 );
+        var request = new ProductRequestDTO("New description", "New Product", 9.99);
         var responseDTO = createUpdatedProductResponse();
 
         when(productService.createProduct(any(ProductRequestDTO.class))).thenReturn(responseDTO);
@@ -115,7 +115,7 @@
 
     @Test
     void createProductPriceNotValidException() throws Exception {
-        var request = new ProductRequestDTO("New description", "New Product",0, 1);
+        var request = new ProductRequestDTO("New description", "New Product",0);
 
         when(productService.createProduct(any(ProductRequestDTO.class))).thenThrow(new ProductPriceNotValidException(""));
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"31d7ec7e-e327-43b1-b99e-1f11abc7b6cb\" name=\"Changes\" comment=\"fix: changed RequestDTO for ResponseDTO\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_06_2023_08_58__Changes_.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_06_2023_08_58__Changes_.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"dev-task4\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2R1UEZqetFdLKolO81miOVMGDBl\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Vitor/OneDrive/Área de Trabalho/Teste&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;spring.configuration.checksum&quot;: &quot;db96ff26706a1a3d595ecb67266c2d94&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\" selected=\"JUnit.java in ecommerce\">\r\n    <configuration name=\"PaymentRestControllerTest.createPaymentSuccess\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ecommerce\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"br.com.compassuol.sp.challenge.ecommerce.controllers.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"br.com.compassuol.sp.challenge.ecommerce.controllers\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"br.com.compassuol.sp.challenge.ecommerce.controllers.PaymentRestControllerTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"createPaymentSuccess\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ProductServiceTest.createProductSuccessTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ecommerce\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"br.com.compassuol.sp.challenge.ecommerce.service.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"br.com.compassuol.sp.challenge.ecommerce.service\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"br.com.compassuol.sp.challenge.ecommerce.service.ProductServiceTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"createProductSuccessTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"br.com.compassuol.sp.challenge.ecommerce in ecommerce\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ecommerce\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"br.com.compassuol.sp.challenge.ecommerce.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"br.com.compassuol.sp.challenge.ecommerce\" />\r\n      <option name=\"TEST_OBJECT\" value=\"package\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ecommerce in ecommerce\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ecommerce\" />\r\n      <option name=\"TEST_OBJECT\" value=\"directory\" />\r\n      <dir value=\"$PROJECT_DIR$/ecommerce/src/test/java/br/com/compassuol/sp/challenge/ecommerce\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"java in ecommerce\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"ecommerce\" />\r\n      <option name=\"TEST_OBJECT\" value=\"directory\" />\r\n      <dir value=\"$PROJECT_DIR$/ecommerce/src/test/java\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"EcommerceApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <module name=\"ecommerce\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"br.com.compassuol.sp.challenge.ecommerce.EcommerceApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"JUnit.java in ecommerce\" />\r\n        <item itemvalue=\"JUnit.br.com.compassuol.sp.challenge.ecommerce in ecommerce\" />\r\n        <item itemvalue=\"JUnit.PaymentRestControllerTest.createPaymentSuccess\" />\r\n        <item itemvalue=\"JUnit.ecommerce in ecommerce\" />\r\n        <item itemvalue=\"JUnit.ProductServiceTest.createProductSuccessTest\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"31d7ec7e-e327-43b1-b99e-1f11abc7b6cb\" name=\"Changes\" comment=\"\" />\r\n      <created>1686416973243</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1686416973243</updated>\r\n      <workItem from=\"1686416976767\" duration=\"200000\" />\r\n      <workItem from=\"1686423892236\" duration=\"1282000\" />\r\n      <workItem from=\"1686488904067\" duration=\"193000\" />\r\n      <workItem from=\"1686489190054\" duration=\"1572000\" />\r\n      <workItem from=\"1686493985280\" duration=\"2095000\" />\r\n      <workItem from=\"1686572211159\" duration=\"4937000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/challenge$br_com_compassuol_sp_challenge_ecommerce_in_ecommerce.ic\" NAME=\"br.com.compassuol.sp.challenge.ecommerce in ecommerce Coverage Results\" MODIFIED=\"1686572355921\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\r\n      <FILTER>br.com.compassuol.sp.challenge.ecommerce.*</FILTER>\r\n    </SUITE>\r\n    <SUITE FILE_PATH=\"coverage/challenge2$ecommerce_in_ecommerce.ic\" NAME=\"ecommerce in ecommerce Coverage Results\" MODIFIED=\"1686496243293\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n    <SUITE FILE_PATH=\"coverage/challenge2$controllers_in_ecommerce.ic\" NAME=\"controllers in ecommerce Coverage Results\" MODIFIED=\"1686485905966\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 4bbbe5c74023a90c076af21574dff0e38af25f1b)
+++ b/.idea/workspace.xml	(date 1686581311938)
@@ -5,13 +5,16 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="31d7ec7e-e327-43b1-b99e-1f11abc7b6cb" name="Changes" comment="fix: changed RequestDTO for ResponseDTO">
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_06_2023_08_58__Changes_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_11_06_2023_08_58__Changes_.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/dto/request/ProductRequestDTO.java" beforeDir="false" afterPath="$PROJECT_DIR$/ecommerce/src/main/java/br/com/compassuol/sp/challenge/ecommerce/dto/request/ProductRequestDTO.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="CoverageOptionsProvider">
+    <option name="myAddOrReplace" value="1" />
   </component>
   <component name="FileTemplateManagerImpl">
     <option name="RECENT_TEMPLATES">
@@ -23,7 +26,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="dev-task4" />
+        <entry key="$PROJECT_DIR$" value="main" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -59,7 +62,7 @@
     &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
 }</component>
-  <component name="RunManager" selected="JUnit.java in ecommerce">
+  <component name="RunManager" selected="JUnit.ecommerce in ecommerce">
     <configuration name="PaymentRestControllerTest.createPaymentSuccess" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="ecommerce" />
       <extension name="coverage">
@@ -131,10 +134,10 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="JUnit.ecommerce in ecommerce" />
         <item itemvalue="JUnit.java in ecommerce" />
         <item itemvalue="JUnit.br.com.compassuol.sp.challenge.ecommerce in ecommerce" />
         <item itemvalue="JUnit.PaymentRestControllerTest.createPaymentSuccess" />
-        <item itemvalue="JUnit.ecommerce in ecommerce" />
         <item itemvalue="JUnit.ProductServiceTest.createProductSuccessTest" />
       </list>
     </recent_temporary>
@@ -153,17 +156,43 @@
       <workItem from="1686489190054" duration="1572000" />
       <workItem from="1686493985280" duration="2095000" />
       <workItem from="1686572211159" duration="4937000" />
+      <workItem from="1686581265143" duration="46000" />
     </task>
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
+  </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State>
+              <option name="FILTERS">
+                <map>
+                  <entry key="branch">
+                    <value>
+                      <list>
+                        <option value="dev-task4" />
+                      </list>
+                    </value>
+                  </entry>
+                </map>
+              </option>
+            </State>
+          </value>
+        </entry>
+      </map>
+    </option>
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/challenge$br_com_compassuol_sp_challenge_ecommerce_in_ecommerce.ic" NAME="br.com.compassuol.sp.challenge.ecommerce in ecommerce Coverage Results" MODIFIED="1686572355921" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
+    <SUITE FILE_PATH="coverage/challenge$br_com_compassuol_sp_challenge_ecommerce_in_ecommerce.ic" NAME="br.com.compassuol.sp.challenge.ecommerce in ecommerce Coverage Results" MODIFIED="1686577693103" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false">
       <FILTER>br.com.compassuol.sp.challenge.ecommerce.*</FILTER>
     </SUITE>
     <SUITE FILE_PATH="coverage/challenge2$ecommerce_in_ecommerce.ic" NAME="ecommerce in ecommerce Coverage Results" MODIFIED="1686496243293" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
     <SUITE FILE_PATH="coverage/challenge2$controllers_in_ecommerce.ic" NAME="controllers in ecommerce Coverage Results" MODIFIED="1686485905966" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
+    <SUITE FILE_PATH="coverage/challenge$ecommerce_in_ecommerce.ic" NAME="ecommerce in ecommerce Coverage Results" MODIFIED="1686578218969" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
+    <SUITE FILE_PATH="coverage/challenge$java_in_ecommerce.ic" NAME="java in ecommerce Coverage Results" MODIFIED="1686578156391" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
   </component>
 </project>
\ No newline at end of file
